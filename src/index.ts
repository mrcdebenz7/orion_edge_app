import {Hono} from 'hono'; import {cors} from 'hono/cors'; import {zValidator} from '@hono/zod-validator'; import {z} from 'zod'; import {importClients} from './handlers/clients'; import {importLeads} from './handlers/leads'; import {sendCampaign} from './handlers/campaigns'; const app=new Hono(); app.use('*',cors({origin:(c)=>c.env.ALLOWED_ORIGINS||'*'})); app.post('/api/clients/import', zValidator('json', z.object({clients: z.array(z.object({name:z.string(),domain:z.string().optional(),plan:z.enum(['Basic','Pro','Growth']).optional(),from_email:z.string().email().optional(),resend_domain:z.string().optional(),kb_url:z.string().optional()}))})), async c=>{const {clients}=await c.req.json(); return c.json(await importClients(c.env,clients))}); app.post('/api/leads/import', zValidator('json', z.object({client:z.string(),leads: z.array(z.object({name:z.string().optional(),email:z.string().email(),role:z.string().optional(),website:z.string().optional(),pain_point:z.string().optional()}))})), async c=>{const {client,leads}=await c.req.json(); return c.json(await importLeads(c.env,client,leads))}); app.post('/api/campaigns/send', zValidator('json', z.object({client:z.string(),subject:z.string().min(1),leads: z.array(z.object({name:z.string().optional(),email:z.string().email(),role:z.string().optional(),website:z.string().optional(),pain_point:z.string().optional()})).optional(),send:z.boolean().optional()})), async c=>{const body=await c.req.json(); return c.json(await sendCampaign(c.env,body))}); export default app;